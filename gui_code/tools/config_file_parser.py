import configparser
from typing import List


class ConfigFileParser:
    """
    ConfigFileParser
    """

    def __init__(self, filename: str):
        """
        __init__ creates an instance of ConfigFileParser.

        :param filename: Name of the input file to parse.
        :type filename: str
        """
        config = configparser.ConfigParser()
        config.read(filename)
        self.valid = list(config.sections()) == ["Plant Information"]
        if self.valid:
            plant_info = config["Plant Information"]
            if not self.parse(plant_info):
                self.valid = False

    def get_list(self, string: str) -> List[int]:
        """
        get_list takes a list of type string and
        returns it as type list of integers.

        :param string: List of type string.
        :type string: str
        :return: List of integers converted from string.
        :rtype: list(int)
        """
        if len(string) > 0:
            substring = string[1:-1]
            try:
                return [int(x) for x in substring.split(",")]
            except TypeError:
                return None
        else:
            return []

    def check_val(self, type: str, value: str):
        """
        check_val checks the value of dictionary generated by the
        ConfigParser object is of the same type specified by the type
        parameter. If type is "str" then this checks if value is a string
        with length greater than zero when whitespaces are removed. If
        the type is "list4", it checks whether or not value can be converted
        to a list of 4 integers. Lastly, if type is "list2", if checks
        whether value can be converted to a list of 2 integers. If the
        value does not match the type description, then the method returns
        false. Otherwise, it returns true.

        :param type: This string represents a type at which the value should
            be able to convert to.
        :type type: str
        :param value: This is the value of the dictionary generated by the
            ConfigParser object.
        :type value: str
        :return: Returns whether or not value is of the correct type based
            on the type parameter.
        :rtype: boolean
        """
        if len(value.strip(" ")) > 0:
            if type == "str":
                return True
            else:
                if value[0] == "[" and value[-1] == "]":
                    if type == "list4":
                        if len(value[1:-1].split(",")) == 4 and self.get_list(
                            value
                        ):
                            return True
                    elif type == "list2":
                        if len(value[1:-1].split(",")) == 2 and self.get_list(
                            value
                        ):
                            return True
            return False
        else:
            return False

    def parse(self, dict: configparser.ConfigParser):
        """
        parse firstly checks if the configParser object dictionary
        is in the same structure as dict_structure below. If so, it
        checks through every value to see if the datatype matches the
        datatype specified in dict_structure values.

        :param dict: the ConfigParser object created after reading
            the input file.
        :type dict: configparser.ConfigParser
        :return: Returns whether the configparser.ConfigParser object
        gerenerated from input file is correct or not.
        :rtype: boolean
        """
        dict_structure = {
            "name": "str",
            "brightness_extr": "list4",
            "brightness_bound": "list2",
            "brightness_sensor_unit": "str",
            "brightness_actuator_unit": "str",
            "humidity_extr": "list4",
            "humidity_bound": "list2",
            "humidity_sensor_unit": "str",
            "humidity_actuator_unit": "str",
            "temperature_extr": "list4",
            "temperature_bound": "list2",
            "temperature_sensor_unit": "str",
            "temperature_actuator_unit": "str",
            "water_level_extr": "list4",
            "water_level_bound": "list2",
            "water_level_sensor_unit": "str",
            "water_level_actuator_unit": "str",
        }
        valid = True

        if list(dict.keys()) == list(dict_structure.keys()):
            for i in range(len(dict.values())):
                if not self.check_val(
                    list(dict_structure.values())[i], list(dict.values())[i]
                ):
                    valid = False
        else:
            valid = False
        return valid
